# Default values for api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

php:
  image:
    repository: "quay.io/api-platform/php"
    tag: latest
    pullPolicy: Always
  replicaCount: 1
  mercure:
    jwtToken: ""
  jwt:
    secretKey: ""
    publicKey: ""
    passphrase: ""
  env: prod
  debug: '0'
  secret: ""
  corsAllowOrigin: "^https?://(.*\\.api-platform\\.com|localhost(?::[0-9]+)?)$"
  trustedHosts: "^.*\\.api\\-platform\\.com$"
  trustedProxies:
    - 103.21.244.0/22
    - 103.22.200.0/22
    - 103.31.4.0/22
    - 104.16.0.0/12
    - 108.162.192.0/18
    - 131.0.72.0/22
    - 141.101.64.0/18
    - 162.158.0.0/15
    - 172.64.0.0/13
    - 173.245.48.0/20
    - 188.114.96.0/20
    - 190.93.240.0/20
    - 197.234.240.0/22
    - 198.41.128.0/17
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
  service:
    type: ClusterIP
    port: 9000

nginx:
  image:
    repository: "quay.io/api-platform/nginx"
    tag: latest
    pullPolicy: Always
  replicaCount: 1
  service:
    type: ClusterIP
    port: 80

varnish:
  enabled: true
  #url: https://example.com
  image:
    repository: "quay.io/api-platform/varnish"
    tag: latest
    pullPolicy: Always
  replicaCount: 1
  service:
    type: NodePort
    port: 80

# Full configuration: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
postgresql:
  enabled: true
  # If bringing your own PostgreSQL, the full uri to use
  #url: pgsql://api-platform:!ChangeMe!@example.com/api?serverVersion=10
  postgresqlUsername: "api-platform"
  postgresqlPassword: ""
  postgresqlDatabase: "api"
  # Persistent Volume Storage configuration.
  # ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  persistence:
    enabled: false
  pullPolicy: IfNotPresent
  image:
    repository: bitnami/postgresql
    tag: 10

# Full configuration: https://github.com/helm/charts/tree/master/stable/mercure
mercure:
  enabled: true
  publishUrl: http://mercure/.well-known/mercure
  subscribeUrl: https://demo-mercure.api-platform.com/.well-known/mercure
  allowAnonymous: "1"
  corsAllowedOrigins: "^https?://.*\\.api-platform\\.com$"
  jwtKey: ""
  service:
    type: NodePort
    port: 80
  ingress:
    enabled: false
    hosts:
      - host: mercure.example.com
        paths:
          - /
    tls: []
    #  - secretName: mercure-example-tls
    #    hosts:
    #      - chart-example.local

external-dns:
  enabled: true
  domainFilters:
    - api-platform.com
  provider: cloudflare
  cloudflare:
    apiToken: ""
  rbac:
    create: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: demo.api-platform.com
      paths:
        - /
    - host: demo-mercure.api-platform.com
      paths:
        - /
  tls: []
  #  - secretName: api-example-tls
  #    hosts:
  #      - api.example.com

blackfire:
  blackfire:
    enabled: true
  image:
    tag: latest

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
